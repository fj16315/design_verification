   task check_reqs_1;
	input [0:20] test_no;
	input [0:3] req_cmd_in;
	input [0:31] req_first_data_in;
	input [0:31] req_second_data_in;
	input [0:3] out_resp;
	input [0:31] out_data;

	reg [0:4] counter_l;
	reg flag;
	
	begin
		if (out_resp==`RESP_FLOW_ERR || out_resp==`RESP_CMD_ERR || out_resp==`RESP_INT_ERR) begin
		   out_data = out_data1;
		end

		flag = 0;
		for (counter_l = 0; counter_l < 10; counter_l=counter_l+1) begin
		   #1
		   if (out_resp1) begin
		   	flag = 1;
	   	   	if (out_resp1 != out_resp) begin
			   	$display("Test %d failed on line 1\n Expected response: %d \n Actual response: %d \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_resp, out_resp1, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end

	   	   	if (out_data1 != out_data) begin
			   	$display("Test %d failed on line 1\n Expected data: %h \n Actual data: %h \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_data, out_data1, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end
			#(200*(9-counter_l))
			counter_l = 10;
		   end
		   @(negedge c_clk);
		end
		
		if (~flag) begin
		   $display("Test %d failed on line 1 due to timeout \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, req_cmd_in, req_first_data_in, req_second_data_in);
		end		   
	end
   endtask

   task check_reqs_2;
	input [0:20] test_no;
	input [0:3] req_cmd_in;
	input [0:31] req_first_data_in;
	input [0:31] req_second_data_in;
	input [0:3] out_resp;
	input [0:31] out_data;

	reg [0:4] counter_l;
	reg flag;
	
	begin
/*
		if (out_resp==`RESP_FLOW_ERR || out_resp==`RESP_CMD_ERR || out_resp==`RESP_INT_ERR) begin
		   out_data = out_data2;
		end

		flag = 0;
		for (counter_l = 0; counter_l < 10; counter_l=counter_l+1) begin
		   #1
		   if (out_resp2) begin
		   	flag = 1;
	   	   	if (out_resp2 != out_resp) begin
			   	$display("Test %d failed on line 2\n Expected response: %d \n Actual response: %d \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_resp, out_resp2, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end

	   	   	if (out_data2 != out_data) begin
			   	$display("Test %d failed on line 2\n Expected data: %h \n Actual data: %h \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_data, out_data2, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end
			#(200*(9-counter_l))
			counter_l = 10;
		   end
		   @(negedge c_clk);
		end
		
		if (~flag) begin
		   $display("Test &d failed on line 2 due to timeout \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, req_cmd_in, req_first_data_in, req_second_data_in);
		end	
*/ 
//UNCOMMENT BLOCK TO REACTIVATE CHECKER FOR LINE 2
//CURRENTLY DISABLED AS ALL LINE 2 REQUESTS FAIL	   
	end
   endtask

   task check_reqs_3;
	input [0:20] test_no;
	input [0:3] req_cmd_in;
	input [0:31] req_first_data_in;
	input [0:31] req_second_data_in;
	input [0:3] out_resp;
	input [0:31] out_data;

	reg [0:4] counter_l;
	reg flag;
	
	begin
		if (out_resp==`RESP_FLOW_ERR || out_resp==`RESP_CMD_ERR || out_resp==`RESP_INT_ERR) begin
		   out_data = out_data3;
		end

		flag = 0;
		for (counter_l = 0; counter_l < 10; counter_l=counter_l+1) begin
		   #1
		   if (out_resp3) begin
		   	flag = 1;
	   	   	if (out_resp3 != out_resp) begin
			   	$display("Test %d failed on line 3\n Expected response: %d \n Actual response: %d \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_resp, out_resp3, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end

	   	   	if (out_data3 != out_data) begin
			   	$display("Test %d failed on line 3\n Expected data: %h \n Actual data: %h \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_data, out_data3, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end
			#(200*(9-counter_l))
			counter_l = 10;
		   end
		   @(negedge c_clk);
		end
		
		if (~flag) begin
		   $display("Test %d failed on line 3 due to timeout \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, req_cmd_in, req_first_data_in, req_second_data_in);
		end		   
	end
   endtask

   task check_reqs_4;
	input [0:20] test_no;
	input [0:3] req_cmd_in;
	input [0:31] req_first_data_in;
	input [0:31] req_second_data_in;
	input [0:3] out_resp;
	input [0:31] out_data;

	reg [0:4] counter_l;
	reg flag;
	
	begin
		if (out_resp==`RESP_FLOW_ERR || out_resp==`RESP_CMD_ERR || out_resp==`RESP_INT_ERR) begin
		   out_data = out_data4;
		end

		flag = 0;
		for (counter_l = 0; counter_l < 10; counter_l=counter_l+1) begin
		   #1

		   if (req_cmd_in==`CMD_ADD || req_cmd_in==`CMD_SUB) begin   //
			#2000                                                // Comment out block to enforce general testbench
			counter_l = 10;                                      //
		   end                                                       //

		   if (out_resp4) begin
		   	flag = 1;
	   	   	if (out_resp4 != out_resp) begin
			   	$display("Test %d failed on line 4\n Expected response: %d \n Actual response: %d \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_resp, out_resp4, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end

	   	   	if (out_data4 != out_data) begin
			   	$display("Test %d failed on line 4\n Expected data: %h \n Actual data: %h \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, out_data, out_data4, req_cmd_in, req_first_data_in, req_second_data_in);
	   	   	end
			#(200*(9-counter_l))
			counter_l = 10;
		   end
		   @(negedge c_clk);
		end
		
		if (~flag) begin
		   $display("Test %d failed on line 4 due to timeout \n Operator: %d \n 1st Operand: %h \n 2nd Operand: %h \n", test_no, req_cmd_in, req_first_data_in, req_second_data_in);
		end		   
	end
   endtask
